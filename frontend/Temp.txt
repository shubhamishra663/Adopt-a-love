import React, { useEffect, useRef } from 'react'; 
import AliceCarousel from 'react-alice-carousel';
import 'react-alice-carousel/lib/alice-carousel.css';
import Logo from '../utils/logo.png';
import Cat from '../utils/cat.jpg';
import adoptMeImage from '../utils/adoptMe.png';
import Pets from '../utils/pets.jpg';

import ScrollTrigger from "gsap/ScrollTrigger";
import gsap from 'gsap';

gsap.registerPlugin(ScrollTrigger);

const cardData = [
    { id: 1, name: "Shubham Mishra", location: "Patna", message: "Hi, I adopted this cat 'Luci' with the reference of this site, I'm really satisfied." },
    { id: 2, name: "Kumar", location: "Patna", message: "Hi, I adopted this cat 'Luci' with the reference of this site, I'm really satisfied." },
    { id: 3, name: "Mishra", location: "Patna", message: "Hi, I adopted this cat 'Luci' with the reference of this site, I'm really satisfied." }
];

const WhyChooseUs = () => {
    const imgRef = useRef(null); 

    useEffect(() => {
        const tl = gsap.timeline({
            scrollTrigger: {
                trigger: imgRef.current, 
                start: "top 70%", 
                end: "top 20%", 
                scrub: true, 
                markers: true,
            },
        });

        tl.fromTo(imgRef.current, 
            { x: '-100%', y: '300' },
            { x: '0%', y: '0%', duration: 1 } 
        );

        return () => {
            tl.kill();
        };
    }, []);

    return (
        <div className='md:flex'>
            <div className='md:w-[50%] bg-[#eca2b1] h-screen relative overflow-hidden'>
                <img 
                    className='h-full p-5' 
                    src={adoptMeImage} 
                    ref={imgRef} 
                    alt="Adopt Me" 
                />
            </div>

            <div className='md:w-[50%] bg-red-500 h-screen text-center p-8'>
                <h2 className='text-3xl font-bold'>Why Choose Us?</h2>
            </div>
        </div>
    );
};

const HomeCarousel = () => {
    return (
        <div className="bg-purple-400 h-[70vh] w-screen relative overflow-hidden">
            <img
                className="w-screen h-[100vh] object-bottom"
                src={Pets}
                alt="Pets"
            />
        </div>
    );
};

const Card = ({ name, location, message }) => {
    return (
        <div className='bg-[#749785] h-80 w-[85%] md:w-[80%] lg:w-[60%] flex items-center p-5 rounded-2xl mx-2 my-2'>
            <div className='bg-[#D9D9D9] h-[70%] w-full p-3 flex flex-col justify-between'>
                <div className='h-[35%] flex justify-center'>
                    <img className='h-full w-[25%] rounded-full relative bottom-[60%]' src={Cat} alt="Cat" />
                </div>
                <div className='h-[65%] flex flex-col justify-between'>
                    <p className='leading-5'>{message}</p>
                    <p className='leading-5 text-sm text-right'>~ {name}, {location}</p>
                </div>
            </div>
        </div>
    );
};

const Review = () => {
    return (
        <>
            <div className='text-center text-4xl font-bold p-2'>
                <p className=''>Reviews from Our Happy Pet Parents</p>
            </div>

            <div className='w-screen flex flex-wrap justify-center md:grid md:grid-cols-2 lg:grid-cols-3 md:justify-items-center p-8'>
                {cardData.map((card) => (
                    <Card
                        key={card.id}
                        name={card.name}
                        message={card.message}
                        location={card.location}
                    />
                ))}
            </div>
        </>
    );
};














function Home() {
    return (
        <div className="relative overflow-hidden">
            <HomeCarousel />
            <WhyChooseUs />
             
            <Review />

            <div className='h-screen bg-blue-950'></div>
        </div>
    );
}

export default Home;






























<div className="w-screen flex flex-wrap justify-center md:grid md:grid-cols-2 lg:grid-cols-3 md:justify-items-center p-8 overflow-x-auto scroll-smooth bg-red-300">
            {cardData.map(card => (
                <Card key={card.id} {...card} />
            ))}
        </div>




















        email: formData.email,
                    // petName: formData.petName,
                    // breed: formData.breed,
                    height: formData.height,
                    weight: formData.weight,


                    // age: formData.age,
                    // species: formData.species,
                    // gender: formData.gender,
                    // color: formData.color,
                    // size: formData.size,
                    // vaccinated: false,
                    // description: formData.vaccinated,
                    // image: formData.image








        name,age,species,breed,gender,height,weight,color,size,vaccinated,description,image





























SERVER.JS







        const express = require('express');
const cors = require('cors');
const mongoose = require('mongoose');
require('dotenv').config();
const bcrypt = require('bcrypt');
const UserModel = require('./models/userModel');
const PetModel=require('./models/petModels')
const jwt = require('jsonwebtoken');
const cookieParser = require('cookie-parser');
const cloudinary = require('cloudinary').v2;


const app = express();
const port = process.env.PORT || 5000;
const MONGODB_URL = process.env.MONGODB_URL || 'mongodb://localhost:27017/UsersData';

app.use(cors({
  origin: 'http://localhost:3000',
  methods: ['GET', 'POST', 'PUT', 'DELETE'],
  credentials: true,
  allowedHeaders: ['Content-Type', 'Authorization']
}));

app.use(express.json());
app.use(cookieParser());
cloudinary.config({
  secure: true
});
console.log(cloudinary.config());


mongoose.connect(MONGODB_URL).then(() => console.log('Connected to MongoDB'))
  .catch(err => console.error('Could not connect to MongoDB', err));

// Token verification middlewarey
const verifyToken = (req, res, next) => {
  const token = req.cookies.token || req.headers.authorization?.split(" ")[1];
  
  if (!token) {
    return res.status(403).json({ message: "No token provided" });
  }
  const secretKey = process.env.SECRET_CODE || 'shhhh';

  try {
    const decoded = jwt.verify(token, secretKey);
    req.user = decoded; 
    next(); 
  } catch (error) {
    if (error.name === 'TokenExpiredError') {
      return res.status(401).json({ message: "Token expired" });
    }
    return res.status(401).json({ message: "Invalid token" });
  }
};

app.get('/',(req,res)=>{
  res.status(200).send("OK_OK")
})

// Signup Route
app.post('/signup', async (req, res) => {
  const { name, email, password } = req.body;

  // All fields should exist
  if (!(name && email && password)) {
    return res.status(400).send('All fields are required');
  }

  // Check if user already exists
  const existingUser = await UserModel.findOne({ email });
  if (existingUser) {
    return res.status(401).send('User already exists');
  }

  try {
    const hashedPassword = await bcrypt.hash(password, 10);
    const newUser = new UserModel({ name, email, password: hashedPassword });
    await newUser.save();

    const token = jwt.sign(
      { id: newUser._id, email },
      'shhhh',
      {
        expiresIn: '2h'
      }
    );

    newUser.token = token;

    res.status(200).json({ message: 'Signup successful', user: newUser });
  } catch (error) {
    console.error(error);
    res.status(500).send('Internal Server Error');
  }
});

// Login Route
app.post('/login', async (req, res) => {
  const { email, password } = req.body;
  try {
    const user = await UserModel.findOne({ email });
    if (!user) {
      return res.status(400).json({ error: 'User not found' });
    }

    const isPasswordValid = await bcrypt.compare(password, user.password);
    if (!isPasswordValid) {
      return res.status(400).json({ error: 'Invalid password' });
    }

    const token = jwt.sign(
      { id: user._id ,email},
      'shhhh',
      {
        expiresIn: '2h'
      }
    );
    user.token = token;

    const options = {
      maxAge: 3 * 24 * 60 * 60 * 1000, // 3 days
      httpOnly: true,
      sameSite:'None'
    };

    res.status(200).cookie("token", token, options).json({ message: 'Login successful', user });
  } catch (error) {
    console.error(error);
    res.status(500).json({ error: 'Internal Server Error' });
  }
});


app.get('/profile/:email', verifyToken, async(req, res) => {
  if (!req.user) {
    return res.status(401).json({ error: 'Unauthorized' });
  }
  
  try {
    const user = await UserModel.findById(req.user.id); // Assuming you're using Mongoose
    
    if (!user) {
      return res.status(404).json({ error: 'User not found' });
    }

    res.status(200).json({
      message: `Welcome, ${user.name}`,
      user: {
        id: user._id,
        email: user.email,
        name: user.name,
      }
    });
  } catch (err) {
    res.status(500).json({ error: 'Internal server error' });
  }
  
});






// Route to get all pets of a user by email
app.get('/user-pets/:email', verifyToken,async (req, res) => {
  const { email } = req.params;

  try {
    const user = await UserModel.findOne({ email }).populate('pets');

    if (!user) {
      return res.status(404).json({ message: 'User not found' });
    }

    res.status(200).json({
      message: 'User pets fetched successfully',
      pets: user.pets
    });
  } catch (error) {
    console.error('Error fetching user pets:', error);
    res.status(500).json({ message: 'Internal server error' });
  }
});





app.post('/petAdd', async (req, res) => {
  const { email, petName, age, species, breed, gender, weight, color, size, vaccinated, description, image,state,city,mobileNo,energy } = req.body;

  console.log(`${email, petName, age, species, breed, gender, weight, color, size, vaccinated, description, image,energy}`);
  
  
  // if (!email || !petName || !age || !species || !breed || !gender || !color || !size || vaccinated === undefined || !description) {
  //   return res.status(400).json({ message: 'Missing required fields' });
  // }


  const options = {
    use_filename: true,
    unique_filename: false,
    overwrite: true,
  };

  try {
    // Upload the image
    const result = await cloudinary.uploader.upload(image, options);
    console.log(result);
    return result.public_id;
  } catch (error) {
    console.error(error);
  }



  try {
    const newPet = new PetModel({
      email,
      petName,
      age,
      species,
      breed,
      gender,
      weight,
      color,
      size,
      vaccinated,
      description,
      image,
      state,
      city,
      mobileNo,
      energy
    });



    const savedPet = await newPet.save();

    const user = await UserModel.findOneAndUpdate(
      { email },
      { $push: { pets: savedPet._id } }, 
      { new: true }
    );

    if (!user) {
      return res.status(404).json({ message: 'User not found' });
    }

    res.status(200).json({
      message: 'Pet added successfully and user updated',
      pet: savedPet,
      user,
    });
  } catch (error) {
    console.error('Error adding pet:', error);
    res.status(500).json({ message: 'Internal server error' });
  }

});


app.get('/adopt', async (req, res) => {
  try {
    const pets = await PetModel.find({});
    res.status(200).json(pets);
  } catch (error) {
    console.error('Error fetching pets:', error);
    res.status(500).json({ message: 'Internal server error' });
  }
});


// GET pet by ID
app.get('/petprofile/:id', async (req, res) => {
  const petId = req.params.id;
  console.log(petId);
  

  // Validate the ID format
  if (!mongoose.Types.ObjectId.isValid(petId)) {
      return res.status(400).json({ message: 'Invalid ID format' });
  }

  try {
      const pet = await PetModel.findById(petId);

      if (!pet) {
          return res.status(404).json({ message: 'Pet not found' });
      }

      res.status(200).json(pet);
  } catch (error) {
      console.error('Error fetching pet data:', error.message);
      res.status(500).json({ message: 'Server error' });
  }
});








// Start the server
app.listen(port, () => {
  console.log(`Server running at http://localhost:${port}`);
});
